# 应用基本配置
[app]
name = "wx-msg-chat"
version = "1.0.0"
env = "development"
port = ":8080"
debug = true

# HTTP服务器配置
[server]
host = "0.0.0.0"
port = 8080
read_timeout = "30s"
write_timeout = "30s"
idle_timeout = "120s"

# 日志配置
[log]
level = "debug"          # debug, info, warn, error
format = "console"       # json, console
output = "both"          # stdout, file, both
file_path = "./logs/app.log"
max_size = 100          # 日志文件最大大小(MB)
max_age = 30            # 日志文件保留天数
max_backups = 3         # 保留的日志文件数量
compress = true         # 是否压缩旧日志文件

# 数据库配置
[database]
host = "120.55.65.180"
port = 60100
username = "root"
password = "Geek@135#"     # 使用实际的数据库密码
database = "db_veeyii"
charset = "utf8"
parse_time = true

# Redis配置 (go-redis v8 推荐配置)
[redis]
host = "127.0.0.1"
port = 6379
password = ""           # 如果没有密码就留空
database = 0            # 使用默认数据库
pool_size = 10          # 连接池大小
min_idle_conns = 5      # 最小空闲连接数
max_retries = 3         # 重试次数
dial_timeout = "5s"     # 连接超时
read_timeout = "3s"     # 读取超时
write_timeout = "3s"    # 写入超时
pool_timeout = "4s"     # 从连接池获取连接的超时
idle_timeout = "300s"   # 空闲连接超时（5分钟）

# RabbitMQ配置 (推荐配置)
[rabbitmq]
host = "localhost"
port = 5672
username = "test522"          # 默认用户名
password = "Geek@135#"          # 默认密码
vhost = "wxchat"                 # 默认虚拟主机
heartbeat = "60s"           # 心跳间隔
connection_timeout = "30s"   # 连接超时
exchange_name = "wx_msg_exchange"
queue_name = "wx_msg_queue"
routing_key = "wx_msg"
durable = true              # 队列持久化
auto_delete = false         # 队列不自动删除

# 新增的性能和重试配置
max_retries = 20             # 最大重试次数
retry_delay = "5s"          # 重试延迟
prefetch_count = 10         # 预取消息数量
concurrency = 5             # 并发消费者数量

# 死信队列配置
dead_letter_exchange = "wx_msg_dlx"
dead_letter_queue = "wx_msg_dlq"
dead_letter_routing_key = "wx_msg_dlx"


# OCR服务配置
[ocr]
base_url = "http://221.230.88.204:8000"
timeout = "30s"
enabled = true 

# MinIO文件存储配置
[minio]
endpoint = "221.230.88.202:9000"
access_key_id = "weiyi-minio-ak"
secret_access_key = "a52bd3f2c1369db9547b8887891aed8b"
bucket_name = "ocr"
use_ssl = false
region = "us-east-1"
enabled = true

# WebSocket客户端配置
[websocket]
url = "ws://127.0.0.1:1239/ws/GetSyncMsg?key=e5afa398-5c58-4261-b4d7-96afbf3357c8"
ping_interval = "30s"
reconnect_interval = "5s"
max_reconnect_attempts = 100
enabled = true
filter_message_types = true
supported_message_types = [1, 3]  # 1:文本消息, 3:图片消息 

# Webhook推送配置 - 控制OCR钱包数据推送行为
[webhook]
# 推送总开关：true=启用推送, false=完全禁用推送
# 当OCR识别到钱包代码并成功保存到数据库后，会根据此配置决定是否推送数据
enabled = true

# 推送URL列表，支持多个URL同时推送
urls = [
     "https://api.example.com/webhook/ocr-wallet",
]

# HTTP请求超时时间
timeout = "3s"

# 最大重试次数（推送失败时的重试次数）
max_retries = 3

# 重试间隔（支持指数退避）
retry_interval = "2s"

# 并发推送协程数（控制同时处理的推送任务数量）
concurrent_pushers = 10

callback_url="http://127.0.0.1:8080/api/v1/wx/textAndImage"

# 所有者ID配置
owner_id = 1

# 配置说明：
# 1. 设置 enabled = true 并配置 urls 来启用推送
# 2. 设置 enabled = false 来完全禁用推送功能
# 3. data_expiry 确保只推送新鲜数据，避免推送过期的钱包信息
# 4. 推送失败会按照指数退避策略进行重试